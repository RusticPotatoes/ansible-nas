---
- name: Start gluetun
  block:
    - name: Gather info about child containers
      community.docker.docker_container_info:
        name: "{{ item.name }}"
      loop: "{{ gluetun_routed_containers }}"
      register: child_container_info

    - name: Determine which containers are actually running
      ansible.builtin.set_fact:
        running_routed_containers: >-
          {{
            child_container_info.results
            | selectattr('container', 'defined')
            | selectattr('container.State.Status', '==', 'running')
            | map(attribute='item')
            | list
          }}

    - name: Stop the currently running child containers
      community.docker.docker_container:
        name: "{{ item.name }}"
        state: stopped
      loop: "{{ running_routed_containers }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Stop gluetun
      community.docker.docker_container:
        name: "{{ gluetun_container_name }}"
        state: stopped

    - name: Create Gluetun config directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: 1000
        group: 1000
      loop:
        - "{{ gluetun_config_directory }}/wireguard"

    - name: Flatten child container ports
      ansible.builtin.set_fact:
        gluetun_combined_ports: >-
          {{
            [ gluetun_http_port ]
            + (gluetun_routed_containers | map(attribute='ports') | list | flatten)
          }}

    - name: Create/Start Gluetun container
      community.docker.docker_container:
        name: "{{ gluetun_container_name }}"
        image: "{{ gluetun_image_name }}:{{ gluetun_image_version }}"
        pull: true
        capabilities:
          - NET_ADMIN
        volumes:
          - "{{ gluetun_config_directory }}/wireguard:/gluetun/wireguard/:rw"
          - "/etc/resolv.conf:/etc/resolv.conf:rw"
        ports: "{{ gluetun_combined_ports }}"
        # dns_servers: "{{ default_dns_servers }}"
        env:
          VPN_SERVICE_PROVIDER: "custom"
          VPN_TYPE: "wireguard"
          DOT: "on"  # Enable DNS over TLS
          FIREWALL: "on"  # Enable Gluetun firewall to prevent leaks
          # BLOCK_MALICIOUS: "on"
          # BLOCK_SURVEILLANCE: "on"
          # BLOCK_ADS: "on"
          # DNS_ADDRESS: "{{ default_dns_servers }}"
          VPN_INTERFACE: "wg0"
          VPN_OUTPUT_INTERFACE: "eth0"
        restart_policy: unless-stopped
        image_name_mismatch: recreate
        memory: "{{ gluetun_memory }}"
        labels:
          traefik.enable: "{{ gluetun_available_externally | string }}"
          traefik.http.routers.gluetun.rule: "Host(`{{ gluetun_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.gluetun.tls.certresolver: "letsencrypt"
          traefik.http.routers.gluetun.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.gluetun.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.gluetun.loadbalancer.server.port: "8000"
        healthcheck:
          test: ["CMD", "curl", "-sf", "http://localhost:8000/vpn/status"]
          interval: 60s
          timeout: 10s
          retries: 3
          start_period: 30s

    - name: Wait for Gluetun to be fully running
      community.docker.docker_container_info:
        name: "{{ gluetun_container_name }}"
      register: gluetun_status
      until: gluetun_status.container.State.Status == "running"
      retries: 30
      delay: 5
      changed_when: false

  when: gluetun_enabled is true


- name: Stop gluetun
  block:
    - name: Stop gluetun
      community.docker.docker_container:
        name: "{{ gluetun_container_name }}"
        state: absent
  when: gluetun_enabled is false